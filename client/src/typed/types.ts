// generated by: rails generate ar_sync:types client/src/typed/

export interface TypeComment {
  id: number
  sync_keys: (string [])
  reactions: (TypeReaction [])
  reactionSummary: { like?: number; dislike?: number }
  myReaction: TypeReaction
  postId: (number | null)
  body: string
  createdAt: string
  updatedAt: string
  user: TypeUserOnlyIdNameIsFollowingIsFollowed
  _meta?: { name: 'Comment'; query: TypeCommentQueryBase }
}

export interface TypeFollow {
  id: number
  sync_keys: (string [])
  from: TypeUserOnlyIdName
  to: TypeUserOnlyIdName
  _meta?: { name: 'Follow'; query: TypeFollowQueryBase }
}

export interface TypePost {
  id: number
  sync_keys: (string [])
  reactions: (TypeReaction [])
  reactionSummary: { like?: number; dislike?: number }
  myReaction: TypeReaction
  title: string
  body: string
  createdAt: string
  updatedAt: string
  comments: (TypeComment [])
  commentsLast5: (TypeComment [])
  commentsCount: number
  user: TypeUserOnlyIdNameIsFollowingIsFollowed
  _meta?: { name: 'Post'; query: TypePostQueryBase }
}

export interface TypeReaction {
  id: number
  sync_keys: (string [])
  kind: ("like" | "dislike")
  createdAt: string
  user: TypeUserOnlyIdNameIsFollowingIsFollowed
  _meta?: { name: 'Reaction'; query: TypeReactionQueryBase }
}

export interface TypeUser {
  id: number
  sync_keys: (string [])
  name: string
  posts: (TypePost [])
  followings: (TypeFollow [])
  followeds: (TypeFollow [])
  isFollowing: boolean
  isFollowed: boolean
  followingCount: number
  followedCount: number
  _meta?: { name: 'User'; query: TypeUserQueryBase }
}

export interface TypeUserOnlyIdName {
  id: number
  name: string
  _meta?: { name: 'UserOnlyIdName'; query: TypeUserOnlyIdNameQueryBase }
}

export interface TypeUserOnlyIdNameIsFollowingIsFollowed {
  id: number
  name: string
  isFollowing: boolean
  isFollowed: boolean
  _meta?: { name: 'UserOnlyIdNameIsFollowingIsFollowed'; query: TypeUserOnlyIdNameIsFollowingIsFollowedQueryBase }
}

export type TypeCommentQuery = keyof (TypeCommentQueryBase) | Readonly<(keyof (TypeCommentQueryBase))[]> | TypeCommentQueryBase
export interface TypeCommentQueryBase {
  id?: true | { as: string }
  sync_keys?: true | { as: string }
  reactions?: true | TypeReactionQuery | { as?: string; params: { limit?: number; order?: ({ [key: string]: ("asc" | "desc") } | "asc" | "desc") }; attributes?: TypeReactionQuery }
  reactionSummary?: true | { as: string }
  myReaction?: true | TypeReactionQuery | { as?: string; attributes?: TypeReactionQuery }
  postId?: true | { as: string }
  body?: true | { as: string }
  createdAt?: true | { as: string }
  updatedAt?: true | { as: string }
  user?: true | TypeUserOnlyIdNameIsFollowingIsFollowedQuery | { as?: string; attributes?: TypeUserOnlyIdNameIsFollowingIsFollowedQuery }
  '*'?: true
}

export type TypeFollowQuery = keyof (TypeFollowQueryBase) | Readonly<(keyof (TypeFollowQueryBase))[]> | TypeFollowQueryBase
export interface TypeFollowQueryBase {
  id?: true | { as: string }
  sync_keys?: true | { as: string }
  from?: true | TypeUserOnlyIdNameQuery | { as?: string; attributes?: TypeUserOnlyIdNameQuery }
  to?: true | TypeUserOnlyIdNameQuery | { as?: string; attributes?: TypeUserOnlyIdNameQuery }
  '*'?: true
}

export type TypePostQuery = keyof (TypePostQueryBase) | Readonly<(keyof (TypePostQueryBase))[]> | TypePostQueryBase
export interface TypePostQueryBase {
  id?: true | { as: string }
  sync_keys?: true | { as: string }
  reactions?: true | TypeReactionQuery | { as?: string; params: { limit?: number; order?: ({ [key: string]: ("asc" | "desc") } | "asc" | "desc") }; attributes?: TypeReactionQuery }
  reactionSummary?: true | { as: string }
  myReaction?: true | TypeReactionQuery | { as?: string; attributes?: TypeReactionQuery }
  title?: true | { as: string }
  body?: true | { as: string }
  createdAt?: true | { as: string }
  updatedAt?: true | { as: string }
  comments?: true | TypeCommentQuery | { as?: string; params: { limit?: number; order?: ({ [key: string]: ("asc" | "desc") } | "asc" | "desc") }; attributes?: TypeCommentQuery }
  commentsLast5?: true | TypeCommentQuery | { as?: string; params: { limit?: number; order?: ({ [key: string]: ("asc" | "desc") } | "asc" | "desc") }; attributes?: TypeCommentQuery }
  commentsCount?: true | { as: string }
  user?: true | TypeUserOnlyIdNameIsFollowingIsFollowedQuery | { as?: string; attributes?: TypeUserOnlyIdNameIsFollowingIsFollowedQuery }
  '*'?: true
}

export type TypeReactionQuery = keyof (TypeReactionQueryBase) | Readonly<(keyof (TypeReactionQueryBase))[]> | TypeReactionQueryBase
export interface TypeReactionQueryBase {
  id?: true | { as: string }
  sync_keys?: true | { as: string }
  kind?: true | { as: string }
  createdAt?: true | { as: string }
  user?: true | TypeUserOnlyIdNameIsFollowingIsFollowedQuery | { as?: string; attributes?: TypeUserOnlyIdNameIsFollowingIsFollowedQuery }
  '*'?: true
}

export type TypeUserQuery = keyof (TypeUserQueryBase) | Readonly<(keyof (TypeUserQueryBase))[]> | TypeUserQueryBase
export interface TypeUserQueryBase {
  id?: true | { as: string }
  sync_keys?: true | { as: string }
  name?: true | { as: string }
  posts?: true | TypePostQuery | { as?: string; params: { limit?: number; order?: ({ [key: string]: ("asc" | "desc") } | "asc" | "desc") }; attributes?: TypePostQuery }
  followings?: true | TypeFollowQuery | { as?: string; params: { limit?: number; order?: ({ [key: string]: ("asc" | "desc") } | "asc" | "desc") }; attributes?: TypeFollowQuery }
  followeds?: true | TypeFollowQuery | { as?: string; params: { limit?: number; order?: ({ [key: string]: ("asc" | "desc") } | "asc" | "desc") }; attributes?: TypeFollowQuery }
  isFollowing?: true | { as: string }
  isFollowed?: true | { as: string }
  followingCount?: true | { as: string }
  followedCount?: true | { as: string }
  '*'?: true
}

export type TypeUserOnlyIdNameQuery = keyof (TypeUserOnlyIdNameQueryBase) | Readonly<(keyof (TypeUserOnlyIdNameQueryBase))[]> | TypeUserOnlyIdNameQueryBase
export interface TypeUserOnlyIdNameQueryBase {
  id?: true | { as: string }
  name?: true | { as: string }
  '*'?: true
}

export type TypeUserOnlyIdNameIsFollowingIsFollowedQuery = keyof (TypeUserOnlyIdNameIsFollowingIsFollowedQueryBase) | Readonly<(keyof (TypeUserOnlyIdNameIsFollowingIsFollowedQueryBase))[]> | TypeUserOnlyIdNameIsFollowingIsFollowedQueryBase
export interface TypeUserOnlyIdNameIsFollowingIsFollowedQueryBase {
  id?: true | { as: string }
  name?: true | { as: string }
  isFollowing?: true | { as: string }
  isFollowed?: true | { as: string }
  '*'?: true
}

export type TypeRequest = 
  | TypeNewpostsRequest
  | TypeProfileRequest
  | TypeUserRequest
  | TypePostRequest
  | TypeCommentRequest
  | TypeClassPostRequest
  | TypeClassCommentRequest
  | TypeClassUserRequest
  | TypeClassFollowRequest
  | TypeClassReactionRequest
export type ApiNameRequests =  {
  newposts: TypeNewpostsRequest
  profile: TypeProfileRequest
  user: TypeUserRequest
  post: TypePostRequest
  comment: TypeCommentRequest
  Post: TypeClassPostRequest
  Comment: TypeClassCommentRequest
  User: TypeClassUserRequest
  Follow: TypeClassFollowRequest
  Reaction: TypeClassReactionRequest
}
export interface TypeNewpostsRequest {
  api: 'newposts'
  params?: {  }
  query: TypePostQuery
  _meta?: { data: TypePost[] }
}

export interface TypeProfileRequest {
  api: 'profile'
  params?: {  }
  query: TypeUserQuery
  _meta?: { data: TypeUser }
}

export interface TypeUserRequest {
  api: 'user'
  params?: { id: number }
  query: TypeUserQuery
  _meta?: { data: TypeUser }
}

export interface TypePostRequest {
  api: 'post'
  params?: { id: number }
  query: TypePostQuery
  _meta?: { data: TypePost }
}

export interface TypeCommentRequest {
  api: 'comment'
  params?: { id: number }
  query: TypeCommentQuery
  _meta?: { data: TypeComment }
}

export interface TypeClassPostRequest {
  api: 'Post'
  params?: { ids: (number []) }
  query: TypePostQuery
  _meta?: { data: TypePost }
}

export interface TypeClassCommentRequest {
  api: 'Comment'
  params?: { ids: (number []) }
  query: TypeCommentQuery
  _meta?: { data: TypeComment }
}

export interface TypeClassUserRequest {
  api: 'User'
  params?: { ids: (number []) }
  query: TypeUserQuery
  _meta?: { data: TypeUser }
}

export interface TypeClassFollowRequest {
  api: 'Follow'
  params?: { ids: (number []) }
  query: TypeFollowQuery
  _meta?: { data: TypeFollow }
}

export interface TypeClassReactionRequest {
  api: 'Reaction'
  params?: { ids: (number []) }
  query: TypeReactionQuery
  _meta?: { data: TypeReaction }
}
